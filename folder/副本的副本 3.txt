


医学影像服务平台远程诊断模块
设计与实现




作 者 姓 名：	何晓政
指 导 教 师：	栗伟 副研究员
单 位 名 称：	计算机科学与工程学院
专 业 名 称：	物联网工程











东 北 大 学
2017年6月




Design and Realization of Remote Diagnosis Module for Medical Image Service Platform









by HE Xiaozheng



Supervisor ：Associate Researcher Li Wei







Northeastern University
June  2017
 
毕业设计（论文）任务书
毕业设计（论文）题目：
医学影像服务平台远程诊断模块设计与实现
设计(论文)的基本内容：
本论文设计内容是医学影像服务平台的一部分，设计与实现一个远程诊断模块，主要内容包括：
（1）实现不同角色医生（用户医生、专家医生）的工作任务列表显示功能；
（2）设计基于HTTP的序列影像传输机制，实现用户医生上传患者影像数据，设计任务分配算法将患者数据分配给对应专家医生；
（3）实现专家医生在线书写诊断意见的功能，系统自动通知用户医生浏览。
本设计要求大规模影像数据传输与存储技术。该模块能够实现影像远程在线诊断和指导，降低患者手术风险。
毕业设计（论文）专题部分：

题目：　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　

设计或论文专题的基本内容：

学生接受毕业设计（论文）题目日期


　　　　　　　　　　　　　第　1　周
指导教师签字：
2017年3月1日

 
医学影像服务平台远程诊断模块设计与实现
摘要
随着科技的进步和社会的发展，人们普遍对健康越来越重视，健康的体魄能够提高人的生活品质、帮助实现人生价值。而医疗服务正与我们自身的健康息息相关，好的医疗服务能够快速、准确的找到患者的病因，然后帮助患者治疗病情。区域发展的不平衡性导致了医疗服务的分配不均，一些经济发达地区的医疗水平可能远远高于经济落后地区，医务人员的能力、水平同样如此。本设计的目的就在于帮助一些经验少的医生更好的跟专家医生进行沟通和交流，同时提供给高水平医生一个远程诊断的途径，从而更好地治疗患病病人。
本设计的主要研究内容分为两个部分，分别是网页端和文件上传客户端。网页端提供给用户医生和专家医生一些患者的基本信息，用户医生可以新建患者病例，随后由系统把任务分配给专家医生，专家医生进行处理再反馈给用户医生。文件上传客户端是用户医生和专家医生文件传输的一个程序，用户医生和专家医生可以从网页端对这些文件进行下载查看，这些文件包括医学影像、化验信息、检查结果等等。
本文主要是从需求分析、系统设计和系统实现这三个部分逐步展示整个系统。采用分模块的思想对系统进行设计，并且同时详细的描述了服务器和客户端的功能实现。然后，对系统进行了测试和性能评估。最后，进行了总结，分析了整个系统的利弊，明确了下一步的工作方向。
关键词： 医疗服务；医学影像；远程诊断；文件传输
 
Design and Implementation of Remote Diagnosis Module for Medical Image Service Platform
Abstract
With the progress of science and social development, people generally pay more and more attention to health. The health can improve the quality of life and help ones achieve the value of life. In addition, medical services are closely related to our lives. Good medical services can find the patients’ causes fast and accurately, and then help patients to treat their diseases. The imbalance in regional development has led to uneven distribution of medical services, and the level of medical care in some economically developed areas may be much higher than that of economically backward areas. The level of medical staff is equally the same. The purpose of this design is to help some less experienced doctors better communicate with experts and provide the high level doctors a way of remote diagnosis. So that, the doctors can help the patients heal their diseases as soon as possible. 
The main research content of this implementation is divided into two parts, web end and uploading files client. The webpage provides the basic information of patients to the user doctor and the expert doctor, and the user doctors can create the patients’ case, and then the tasks are assigned to the expert doctors. After that, the expert doctors deal with them and feedback to the user doctors. The uploading files client is a program for user doctors and expert doctors to transfer files, and then user doctors and expert doctors can download the files from the web pages. The files include medical images, laboratory information, test result, and so on.
This thesis shows the entire design from the functional requirements, system design and system implementation mainly, designing the system with the idea of sub-module. At the same time, the paper describes the server and client in detail. After that, the system was tested and evaluated. Finally, the summary, analysis of the advantages and disadvantages of the entire system are made, and the next step was cleared.
Key words： Medical Service; Medical Image; Remote Diagnosis; File transfer
 




目录
毕业设计（论文）任务书	I
摘要	I
Abstract	II
第1章 绪论	1
1.1 课题研究的背景和来源	1
1.2 课题研究成果应用的实际意义	1
1.3 本论文的内容及主要工作	2
第2章 相关技术简介	5
2.1 Python语言	5
2.1.1 Python语言简介	5
2.1.2 选择Python语言的原因	5
2.2 Tornado服务器	5
2.2.1 Tornado服务器简介	5
2.2.2 选择Tornado服务器的原因	6
2.3 MySQL数据库	6
2.3.1 MySQL数据库简介	6
2.3.2 选择MySQL数据库的原因	6
2.4 网页设计相关技术	7
2.4.1 HTML5简介	7
2.4.2 Bootstrap简介	7
2.4.3 jQuery	7
2.5 wxPython的GUI简介	7
2.5.1 wxPython简介	7
2.5.2 选择wxPython的原因	8
2.6 本章小结	8
第3章 需求分析	9
3.1 系统实现目标	9
3.2 功能性需求描述	11
3.2.1 用户医生和专家医生的注册	12
3.2.2 用户医生和专家医生的登录	12
3.2.3 用户医生、专家医生查看主页面	12
3.2.4 新建患者病例	12
3.2.5 用户医生查看患者信息	13
3.2.6 专家医生查看用户医生提交的患者信息	13
3.2.7 专家医生给出治疗意见	14
3.2.8 用户医生和专家医生上传相关文件	14
3.2.9 用户医生和专家医生下载相关文件	14
3.3 非功能性需求描述	15
3.4 系统运行环境	15
3.5 系统的开发环境	15
3.6 本章小结	16
第4章 系统设计	17
4.1 系统设计原则	17
4.2 系统总体设计	17
4.2.1 系统模块化设计	18
4.2.2 B/S体系结构	19
4.2.3 C/S体系结构	19
4.3 服务器模块设计	20
4.3.1 用户医生、专家医生注册部分设计	21
4.3.2 用户医生、专家医生登录部分设计	21
4.3.3 用户医生提交患者信息部分设计	21
4.3.4 用户医生和专家医生查看患者信息部分设计	22
4.3.5 用户医生和专家医生上传文件部分设计	22
4.3.6 用户医生和专家医生下载文件部分设计	22
4.4 网页端模块设计	22
4.4.1 用户医生和专家医生的注册、登录设计	22
4.4.2 用户医生新建病例设计	23
4.4.3 用户医生、专家医生主页面设计	23
4.4.4 查看患者信息、文件下载设计	23
4.5 文件上传模块设计	23
4.6 数据库模块设计	24
4.6.1 用户医生信息表设计	24
4.6.2 专家医生信息表设计	24
4.6.3 科室信息表设计	25
4.6.4 用户医生患者表设计	26
4.6.5 专家医生患者表设计	26
4.6.6 用户医生和专家医生的患者文件上传信息表设计	27
4.6.7 数据库E-R图	28
4.7 本章小结	29
第5章 系统实现	31
5.1 系统Web网页端的实现	31
5.1.1 用户医生和专家医生注册功能实现	31
5.1.2 用户医生Web网页端的实现	33
5.1.3 专家医生Web网页端的实现	35
5.1.4 文件下载的实现	37
5.2 系统文件上传客户端的实现	38
5.2.1 基于wxPython的图形用户界面GUI实现	39
5.2.2 文件上传的具体实现	40
5.3 系统任务分配的实现	42
5.4 本章小结	43
第6章 系统测试	45
6.1 模块测试	45
6.1.1 注册模块测试	45
6.1.2 用户医生登录模块测试	46
6.1.3 用户医生新建病例模块测试	47
6.1.4 用户医生文件上传模块测试	48
6.1.5 用户医生查看上传的患者信息模块测试	49
6.1.6 专家医生反馈分配的任务模块测试	50
6.1.7 专家医生下载患者文件模块测试	50
6.1.8 专家医生文件上传模块测试	51
6.1.9 用户医生查看专家医生的反馈及文件下载模块测试	52
6.2 系统测试	52
6.3 本章小结	53
第7章 结论	55
7.1 本论文工作总结	55
7.2 展望	55
参考文献	57
致谢	59


 
第1章 绪论
1.1 课题研究的背景和来源
远程医疗的研究和应用是从上个世纪60年代开始的，主要通过电话网和有线电视网传送患者相关文件或者视频图像来供医生交流，它在几十年的发展过程中，用到了传真、电话、无线电通信、图像和实时交互电视技术等等[1]。随着科技水平和医疗水平的不断提高，远程医疗大大发挥了大医院和医疗中心的医务人员和医疗设备的优势，对医疗条件差的偏远地区、船舰或海岛上的病人进行远程诊断和咨询。这项技术的产生提高了诊断的精确性，降低了患者的治疗开销，满足了人们的保健需求，更重要的是大大方便了急诊患者的治疗，让患者不因为距离或者本地医疗水平差而没有得到及时的救助。现在，随着通信、网络的发展，远程诊断也在快速进步，由最先开始的电视监控、电话远程医疗发展到利用因特网进行图像、语音和文字的综合传输，实现实时语音、视频的远程诊断。
远程诊断系统应该是开放的、分布式的、全球化的。互联网的发展，特别是无线通信网络，给人们的生活带来巨大的变化，这种变化在医学领域也同样显而易见[2]。本论文主要设计的是一个医学影像服务平台远程诊断模块，简而言之，就是一个用户医生和专家医生关于患者的沟通平台。医学，是通过科学的方法处理人体的各种疾病的一门学科，它也是一个从预防疾病到治疗疾病的系统学科，它在我们日常生活中起到了不可替代的作用，和我们的生活息息相关。现在，人们也越来越重视自身的身体健康，有很多人都会定期去体检。然而，由于区域发展的不平衡性，造成了一定程度的医疗服务分配不均，在一些较为发达的地区，医疗服务和医务人员水平远远超过一些较为偏僻的地方。在偏僻地区的一些年轻医生往往缺乏经验，可能会对自己患者的病情判断不准确，导致误诊、错诊的情况发生，这种现象不仅仅会导致患者得不到正确的治疗，而且还会激化医生和患者之间的矛盾。
在实际生活中，这样的一些远程咨询系统并不多，所以开发这样的一个医疗影像服务平台是比较有必要的，它能够解决现实中的问题。一些经验不丰富的用户医生可以通过这个平台，尽可能详细的提交自己患者的基本信息，并且上传辅助诊断的影像数据、化验信息、检查结果等文件，然后系统自动分配给相应的专家医生，再由专家医生帮助诊断，协助用户医生更准确的治疗患者。
1.2 课题研究成果应用的实际意义
本论文研究的主要目的是实现一个用户医生和专家医生基于患者信息交互的系统，这里的信息交互指的不仅仅是病人的一些基本信息，如：姓名，年龄，性别，症状等等，还包括各种各样的文件，如：文档，视频，图片等等。为了让医生能够给出确切的诊断意见，医学影像是不可或缺的，它能够在很大程度上帮助医生确诊病情和治疗患者，所以本系统的文件传输正是针对这个方面设计的。如今，医学影像发展迅速，从先开始的平面，到后来的立体，再到现在的多维图像，还有多模式图像的融合，它将不同时间、来源的图像放置于同一个坐标系中配准，大大方便临床诊断及治疗计划的制定。再加上现在分子影像学也逐渐兴起，在将来单个病人的医学影像数据可能就是比较庞大的。医学影像技术在不断发展，这帮助医生更好的诊断治疗患者。本论文的大规模影像数据的传输技术也是看到了这一方面的发展趋势，积极重视了文件传输。
本设计的实际意义主要是提供一个用户医生和专家医生基于患者病情交流的平台，能够让欠发达地区的患者得到更准确的诊断，从而帮助用户医生治疗患者，减少错诊、误诊的情况发生。
远程诊断系统应该是开放的、分布式的，这种分布可能是全球范围的，而本设计基于的B/S模式允许任何地区的计算机连到网络上获取Web页面，具有好的跨平台性，比较适合医学影像远程诊断模块的开发[3]。
1.3 本论文的内容及主要工作
本论文分析介绍了远程诊断模块网页端的设计实现，以及基于wxPython的客户端的程序开发。实现了用户医生和专家医生根据患者个人基本信息和文件进行交流的基本功能。
各章的基本内容如下：
第2章介绍了相关技术，包括客户端的开发语言Python，以及tornado服务器、MySQL数据库、网页设计简介，还有wxPython的GUI设计。
第3章介绍了需求分析，介绍了系统的实现目标、开发运行环境，并且根据实际情况分析了功能性需求以及非功能性需求。
第4章主要介绍的是系统设计，包括系统的设计原则，tornado框架服务器设计，用户医生和专家医生的网页端以及文件上传客户端设计，还有数据库设计。
第5章讲的是系统的实现，系统实现是在系统设计的基础之上完成的。这一章主要介绍了系统Web网页端的实现、系统文件上传客户端的实现和系统任务分配的实现。服务器部分的实现贯穿在系统实现之中，它对用户的各种操作进行响应、处理，从而协调完成全部的工作。
第6章是系统测试，系统测试包括模块测试和系统测试。模块测试是对每个模块单独进行测试，系统测试是模块整合之后的测试。
第7章是结论部分，由工作总结和展望组成，指出本设计的不足和需要改进的地方，同时展望下一步的工作方向。

































 

 
第2章 相关技术简介
2.1 Python语言
2.1.1 Python语言简介
Python，是面向对象的解释型程序设计语言，于1989年由荷兰人Guido van Rossum发明。Python语法清晰简洁，用空白符（white space）作为语句缩进。同时它具有强大丰富的库，作为“胶水语言”，它能够联结其他语言的模块，如：C、C++。Python是一种可以跨平台的应用程序语言，具有简洁性、易读性以及可扩展性，广泛用于PC、Web、商业分析等领域，全球也有许多开发者专业社群。
Python的风格独特，坚持清晰明朗，这也是Python成为一门易读、容易维护、被程序员所欢迎的一门语言的原因之一。Python是完全面向对象的程序设计语言，模块、数字、函数、字符串都是对象，并且支持继承、派生、重载、多继承，对源代码的复用性很有益，它本身就是可扩充的[4]。同时，Python提供了丰富的工具和API，方便程序员能使用C、C++、Cython来扩充模块，而且它的编译器也可以被集成到另外的需要脚本语言的程序。
2.1.2 选择Python语言的原因
本设计是一个大项目中的模块，大项目是用Python写的，为了能够更好的集成到大项目中成为一个整体，让用户更好的使用产品，所以选择python来进行开发，这是第一个原因；第二个原因是因为Python的简单、易学，这是一种简单主义思想的语言，用户可以在较短的时间内掌握Python的语法，编写Python程序；第三个原因是Python的可移植性，虽然本设计是在Windows系统下进行开发的，但是由于Python具有可移植性，开发的程序也同样可以在Linux系统或者Mac系统上使用，提升了用户体验。
2.2 Tornado服务器
2.2.1 Tornado服务器简介
Tornado是一个基于python的Web服务框架和异步网络库，是可扩展的非阻塞式Web服务器。Tornado与现在主流Web服务器的区别是非阻塞式服务器，速度非常快，它可以承载成千上万的连接活动。 Tornado速度快是因为其非阻塞的方式和epoll的应用，对于实时Web服务器来说，它是一个理想的Web框架。因为Tornado的上述特点，它常被用作大型站点的接口服务框架。
2.2.2 选择Tornado服务器的原因
Tornado是一个基于Python语言的Web服务器框架，代码量少，易于学习和编写，容易开发和维护，对于客户端的提交能够快速响应。而且Tornado是一个可扩展的非阻塞式的服务器，它能够处理高并发状态下的网络请求，本设计是医学影像远程服务平台远程诊断模块，大量的医生会提交患者信息、上传患者文件，以及查看下载病人信息，Tornado服务器能够很好的处理这些客户端请求。Tornado同时具有完备的Web框架，提供了Request上下文、URL路由映射等工具，能够帮助本设计更好的完成工作。而且，Tornado框架简单易用，以HTTP请求方式作为方法名，一个页面通常写get和put两种方法就能够处理用户请求了。Tornado是一个既实用又方便Web服务器，本设计用也正是看中了Tornado的这些优点，最后选择它作为系统的服务器。
2.3 MySQL数据库
2.3.1 MySQL数据库简介
本设计采用的是MySQL数据库，MySQL数据库是一个关系型数据库管理系统，它是关系型数据库管理系统的代表之一。而在Web应用开发方面，MySQL是最好的RDBMS（Relational Database Management System，关系型数据库管理系统）应用软件，它具有响应速度快、功能强大、开源等特点，遵守GPL协议，支持标准的SQL命令，可运行在多个平台，并且有良好的一致性[5]。
以下是MySQL数据库的部分系统特性：
（1）使用C、C++编写，使用了多种不一样的编译器进行测试，保证了源代码的可移植性；
（2）支持多种操作系统，如：Windows，Linux，Mac OS等等；
（3）给多种编程语言提供API（Application Programming Interface），包括C、C++、Python、Java、PHP等等；
（4）有优化的SQL查询算法，大大优化查询速度；
（5）MySQL使用标准的SQL数据语言形式，便于管理员进行操作。
2.3.2 选择MySQL数据库的原因
MySQL是一个多线程、快速的数据库系统，而且更重要的原因是MySQL是一个关系型数据库系统，在本设计中，数据库要保存的信息有用户医生和专家医生的基本信息，用户医生和专家医生患者的信息，还有用户医生和专家医生上传的文件信息，这些数据用关系型数据库保存可以大大提高查找速度，并且也可以在一定程度上减少数据的冗余。MySQL数据库也十分容易上手，这也是采用它的原因之一，易学、易用，并且能够较好地实现本设计存储数据的所有功能。基于这些原因，本设计采用了MySQL数据库。
2.4 网页设计相关技术
2.4.1 HTML5简介
HTML5是2010年正式推出的，部分JavaScript代码被HTML5的新属性所代替，一些Div布局代码也被HTML5变为更加语义化的结构标签。在HTML5推出之后，网站前端代码变得更简洁、精炼，代码表达的含义也更一目了然。HTML5提供了各种切割和划分页面的方法，切割组件不仅能够更逻辑的组织站点，而且能增强网站聚合的能力，它赋予开发者和设计者各种层面的能力来发布各种各样的内容，从简单的文本内容到复杂、丰富的交互式多媒体。
HTML5提供了高效的数据管理、绘制、视频和音频工具，促进网页和移动设备的跨浏览器应用开发。同时，HTML5具有灵活性、交互性、易用性等多种特性，并且引入了新标签和新功能，其中包括了表单控制、API、多媒体、数据库支持和显著提升的处理速的等[6]。
2.4.2 Bootstrap简介
Bootstrap是基于HTML5和CSS3开发的，在jQuery的基础上进行了完善。它里面有很多Web组件，比如导航、分页、缩略图、进度条、下拉菜单、对话框、媒体对象等等，用这些Web组件，可以搭建一个好看、功能全的Web网站前端。在合理运用Bootstrap的基础上，可以根据不同Web前端的要求，对Bootstrap的CSS代码进行修改、增添。
在本设计当中，用到了Bootstrap里面的表格和导航等相关的设定，美化了前端的Web设计。
2.4.3 jQuery
jQuery是一个轻量级的JavaScript代码库，它封装了JavaScript常用的功能代码。它兼容CSS3和各种浏览器，可以胜任各种复杂的客户端编码工作，同时拥有多种插件[7,8]。在本设计中，用到了jQuery的datatables、city-picker、validate等多个插件。
2.5 wxPython的GUI简介
2.5.1 wxPython简介
wxPython最初是Robin Dunn开发，第一个现代版本于1998年发布。wxPython是Python语言的一套GUI图形工具箱，同时它是Python对wxWidgets跨平台GUI工具库的绑定，Python程序员可以较方便、快捷的创建功能健全并且美观的GUI图形用户界面。wxPython可以跨平台开发，同一程序可以不需要修改就可以在多种平台上运行使用，能够支持Windows、大多数的Unix和类Unix等系统。
2.5.2 选择wxPython的原因
选择wxPython做用户医生和专家医生上传文件的图形用户界面的主要原因是使用Python作为编程语言，与服务器的编程语言相同，这就实现了系统的统一性，便于维护、管理，编写简单，容易理解。同时，wxPython拥有一套较完整、优秀的GUI工具，包括ListBox、Gauge、Button、TextView等组件，对于程序员编写一个简单的文件上传程序是比较方便的。而且，使用wxPython这样软件，可以获取大量现成的源码进行借鉴，这将大大缩短开发周期和降低开发成本[9]。基于以上的这些原因，系统选择用wxPython来设计上传文件的图形用户界面。
2.6 本章小结
本章主要针对系统开发用到的相关技术进行了介绍。首先简要介绍了Python语言，然后介绍了tornado服务器。之后又介绍了本系统的网页开发用到的相关技术，最后介绍了文件上传GUI部分用到的wxPython。
 
第3章 需求分析
软件的项目开发主要分为五个阶段，需求分析阶段、设计阶段、实现阶段、测试阶段和维护阶段，需求分析所得到的结果，是软件项目开发中其他四个阶段的必备条件[11]。需求分析是程序开发中较关键的部分，它的主要任务就是根据用户的需求，来指定系统所要实现的功能和完成的目标。
详细而又准确的需求分析可以帮助开发者更好地完成系统设计和系统实现。本文在参考了一些远程服务平台和查阅了一些医学远程咨询的论文之后，考虑了系统的功能实现和成本要求，最后制定了本设计的详细需求。
3.1 系统实现目标
在本系统中，存在用户医生和专家医生两个不同的角色。用户医生是提交任务的医生。由于自己的经验少并且医学水平较低，用户医生遇到不能确诊的病人时，可以把当前患者的基本信息和相关文件提交到系统中，系统自动分配给相应的专家医生进行解答。专家医生是接收任务的医生，他们的医学水平较高并且经验丰富，可以根据用户医生提交的患者信息和相关文件较准确地给出患者的病因和所患的疾病，并且给出治疗建议，帮助用户医生治疗病人。
用户医生和专家医生的需求分析如图3.1所示。用户医生和专家医生均需要注册、登录、查看患者信息、上传与下载患者文件这四项功能。用户医生和专家医生不同的地方是用户医生还需要新建病例（用户医生遇到问题，然后提交患者基本信息的情况）、查看专家反馈这两项功能，而专家医生还需要接受系统任务和提交任务反馈这两项功能。
   
(a)用户医生需求分析                 (b)专家医生需求分析
图3.1 需求分析图
用户医生和专家医生的工作流程如图3.2所示。具体工作流程是这样的：当用户医生遇到问题时，他可以到自己的主页面中新建病例来提交患者信息，这些信息包括姓名、年龄、性别、病史、患病初诊（用户医生基于病人的情况根据自己的判断来给出一个初诊结果，然后给专家医生做参考）、病情描述，然后用户医生可以打开自己的文件上传客户端，选择要上传的文件或者文件夹进行上传。文件全部上传之后，用户医生完成患者信息的提交。随后，系统自动把任务分配给对应的专家医生，专家医生可以在自己的主页面查看这些任务。在任务查看界面，专家医生可以下载用户医生传来的患者文件，如：影像数据、检查结果、化验信息等等，然后根据自己的专业知识，提交治疗信息，包括影像描述、影像诊断、复诊结果（专家医生根据用户医生上传的信息来给出相应的复诊情况）、治疗建议。这些信息提交之后，专家医生可以打开自己的文件上传客户端，选择患者影像数据等文件进行上传，在文件全部上传之后，专家医生就完成了本次任务。用户医生可以在专家医生反馈之后在自己的页面进行查看，帮助诊断患者病情状况。
               
             (a)用户医生工作流程图                       (b)专家医生工作流程图
图3.2 工作流程图
为了保证用户医生和专家医生能够顺利的完成自己的工作，系统必须能够达到以下这些基本功能目标：
（1）上传患者基本信息的功能。用户医生提交的患者的信息包括姓名、年龄、性别等网页提交的基本信息；而专家医生提交患者信息包括影像描述、影像诊断、复诊结果、治疗建议。
（2）能够实现影像数据等患者文件上传的功能。用户医生和专家医生需要上传影像数据等患者文件进行交流。文件传输客户端能够实现文件的传输功能。文件传输是本设计的一个重要组成部分之一，上传患者影像数据等文件是用户医生和专家医生诊断患者病情的前提。
（3）浏览单个患者的基本信息功能。当用户医生新建病例提交服务器之后，他仍然可以查看自己提交的患者信息以及患者文件。专家医生同样如此，反馈信息提交服务器后，也可以查看提交的信息和文件。这样有助于医生回顾患者的相关资料。
3.2 功能性需求描述
在系统设计中，常常会使用到用例建模技术，使用这种技术就一定涉及到用例图的设计。用例图指的是由用例（Use Case）、参与者（Actor）、边界和它们之间的关系构成的描述系统关系的一种视图表现形式，它能够形象生动的展示系统的功能，既方便了设计者获取开发需求，又方便了用户直观的了解功能。用例（Use Case）是UML（统一建模语言）中的重要概念，用例抽象的描述了一组动作序列，系统执行这些动作序列，从而产生了相应的结果。图3.3显示的是本系统的用例图，
 
图3.3 医学影像服务平台远程诊断模块系统用例图
如上图所示，在系统中，主要有两个参与者，用户医生和专家医生，他们主要负责的是提交病人信息以及上文相关文件等，系统主要负责的是把这些信息正确的传递给相应的用户医生和专家医生。
3.2.1 用户医生和专家医生的注册
参与者：用户医生、专家医生
简要说明：在使用系统之前，需要用户进行注册，注册分为用户医生注册和专家医生注册，不同的使用者对应于不同的权限。
基本事件流：
（1）用户进入网站的主页面，点击注册；
（2）用户医生和专家医生点击不同的选项卡进行注册；
（3）填写基本信息；
（4）系统保存医生信息，注册成功。
3.2.2 用户医生和专家医生的登录
参与者：用户医生、专家医生
简要说明：在执行工作之前，系统需要用户医生和专家医生的登录来验证用户。
基本事件流：
（1）用户医生、专家医生分别从自己的入口进入登录界面，填写用户名、密码；
（2）系统在数据库中搜索相应的用户名、密码；
（3）数据库中如果已有用户医生和专家医生输入的账号密码，验证通过；如果没有，需要用户医生和专家医生重新输入；
（4）验证通过后，显示当前用户医生或专家医生的主页面。
3.2.3 用户医生、专家医生查看主页面
参与者：用户医生、专家医生
简要说明：用户医生和专家医生都需要登录自己的主页面来工作，对于用户医生来说主页面显示自己上传过的所有病人的基本信息，对于专家医生来说主页面是自己的任务列表，即系统分配给当前专家医生的所有任务。
基本事件流：
（1）用户医生或者专家医生点击对应的入口，进入登录页面；
（2）登陆成功后，Web页面显示用户医生和专家医生的主页面。
3.2.4 新建患者病例
参与者：用户医生
简要说明：用户医生遇到了新的问题时，可以新建病例，填写患者信息，提交任务。
基本事件流：
（1）用户医生进入自己的主页面，点击新建病例；
（2）填写病人的相关信息，包括姓名、性别、年龄、病史、患病初诊和病情描述；
（3）点击提交，患者相关信息提交完成。
3.2.5 用户医生查看患者信息
参与者：用户医生
简要说明：查看患者分为两种情况，第一种情况是用户医生刚上传了患者信息和相关文件，而专家医生还没有给用户医生反馈；第二种情况是专家医生已经完成了服务器分配的相关任务。在第一种情况下，用户医生可以看到自己书写的患者信息，也可以下载自己上传的患者文件；在第二种情况下，用户医生可以看到自己提交的患者信息，也可以看到专家医生反馈的信息，包括影像诊断，影像描述，复诊结果和治疗建议，同时可以下载专家医生上传的相关文件。
基本事件流：
（1）用户医生登陆自己的主页面；
（2）在主页面，用户医生可以看到自己提交的患者的简略信息；
（3）点击相应患者的“查看”，即可查看单个患者的详细信息和上传的文件。
3.2.6 专家医生查看用户医生提交的患者信息
参与者：专家医生
简要说明：当用户医生完成患者信息的上传，系统任务分配完成之后，专家医生需要看到关于患者的完整个人信息以及相关文件，才能进一步给出诊断。专家医生查看患者信息包括两种情况，第一种是系统刚把任务分配给当前这个专家医生，专家医生只能看到用户医生提交的信息及相关文件；第二种情况是专家医生已经处理完了这名患者的任务，给系统提交了反馈信息，这时专家医生既可以看到用户医生提交的患者信息和下载用户医生提交的患者文件，也可以看到自己提交的患者信息和下载自己提交的患者文件。
基本事件流：
（1）专家医生首先需要登录自己的工作列表页面；
（2）工作列表页面有分配给当前专家医生的所有任务，专家医生可以点击“查看”来查阅用户医生提交的当前患者的全部信息；
（3）在查看当前患者的页面，专家医生可以查看用户医生提交的和自己提交的患者信息和相关文件。
3.2.7 专家医生给出治疗意见
参与者：专家医生
简要说明：系统分配任务给专家医生，专家医生查阅后，需要给出治疗意见，所以需要书写影像诊断、影像描述、复诊结果和治疗建议。
基本事件流：
（1）专家医生在登录成功后，可以在自己的任务列表（主页面）看到系统分配的任务；
（2）每个系统分配的任务后有“查看”选项；
（3）专家医生可以在没有处理过的任务里面填写相关信息。
3.2.8 用户医生和专家医生上传相关文件
参与者：用户医生、专家医生
简要说明：用户医生和专家医生需要上传患者相关文件来进行沟通。
基本事件流：
（1）用户医生和专家医生打开自己的文件上传客户端，首先选择上传哪位病人的文件；
（2）然后点击“选择文件”或者“选择文件夹”来选择要上传的文件或者文件夹；
（3）点击“开始上传”，系统此时会把用户医生或者专家医生选择的文件上传到服务器，如果用户临时有事，还可以点击“暂停上传”和“继续上传”来控制文件的上传。
3.2.9 用户医生和专家医生下载相关文件
参与者：用户医生、专家医生
简要说明：当一方的用户医生或者专家医生上传了文件，另外一方的专家医生或者用户医生就一定需要下载文件进行查看，所以下载文件是一项必须的功能。
基本事件流：
（1）用户医生、专家医生登陆自己的主页面；
（2）用户医生、专家医生在主页面点击查看单个患者的详细信息；
（3）在单个患者的信息页面，用户医生和专家医生可以下载对方上传的患者文件。
3.3 非功能性需求描述
软件的功能性需求定义了一个软件期望做什么，而非功能性需求则指定了软件如何运行、功能如何展示的全局限制[12,13]。本系统的非功能性描述如下：
（1）系统可以维持长时间的工作：因为本系统是医学影像服务平台远程诊断模块，在这个平台上用户医生和专家医生一直在传递患者信息和文件，所以系统能够长时间的工作是用户使用这个平台的前提。
（2）患者信息和文件传输的正确性：本系统是为医生开发的，传递的都是病人的数据，如果一项关于病人的错误的信息或文件因为系统的原因被传递给医生，就有可能造成误诊，会给医生和患者带来非常不利的影响。
（3）患者信息和文件传递的即时性：当用户医生或者专家医生向系统请求已提交的患者信息和文件时，系统需要即时响应，不能耽误患者信息和文件的传递。
3.4 系统运行环境
（1）客户端：Windows7操作系统，MySQL5.7 数据库，Google Chrome浏览器，Dreamweaver，wxpython GUI界面，Python；
（2）服务器：Windows7操作系统，tornado服务器，Python，MySQL5.7数据库，sublime；
3.5 系统的开发环境
综合考虑系统的设计和实现，本设计的编程语言Python、服务器Tornado以及wxPython图形用户界面均是开源的，开源有成本低、参考资料多、功能较完善等优点。
服务器环境搭建：服务器采用的是Tornado的Web框架。Tornado是用Python编写的一个强大的、可扩展、非阻塞的服务器，它在高网络流量表现的非常好，而且是一个轻量级的Web服务器，特别适合本系统的设计。同时，Tornado有完备的Web框架并且是一个高效的网络。
客户端环境搭建：客户端主要包含两个部分，网页端和文件上传客户端。网页端主要是用来让医生提交和查阅患者的基本信息，以及下载患者相关文件；文件上传客户端主要是用来帮助医生上传患者的相关文件。网页端需要HTML、CSS、JavaScript、bootstrap、jQuery等一些网页设计的技术支持；文件上传客户端需要wxPython的GUI设计。
开发工具与支持环境：网页Web的开发采用Dreamweaver，服务器和文件上传客户端的开发采用的是sublime，网页上的一些logo、图片等设计采用的是Photoshop，保存医生和患者信息的数据库是MySQL。这些软件的使用方便了本系统的开发，提高了系统一定的复用性和扩展性。
3.6 本章小结
本章首先介绍了系统功能的实现目标，列举了系统必须实现的各项功能，接着介绍了系统的运行环境和开发环境。然后展示了医学影像服务平台远程诊断模块的用例图，根据用例图给出了各项功能性需求描述。最后提出了非功能性需求描述。
本章主要介绍的内容是需求分析，是从系统功能的角度来详细说明的。总的来说，系统的功能性描述是系统设计和系统实现的前提，首先明确系统的功能和用户的需求，然后才能合理的设计、实现系统。
 
第4章 系统设计
系统设计是在需求分析的基础上，从技术的角度来描述如何对系统进行设计，给系统实现打下基础，详细、完善的系统设计可以让项目高效、规范的进行开发，大大提高工作效率，并且可以减少问题、漏洞的产生。
4.1 系统设计原则
易用性：好的系统设计应该重视易用性，易用性是用户体验的保证。如果一个系统功能强大、界面优美，但是唯一的缺点是使用复杂、找不到软件的入口，需要看很多说明才能勉强应用系统，那样也不会有太多的用户去使用这样的系统。所以，易用性是系统设计的重要原则之一。
低成本：系统成本高低是用户是否选择使用这个系统的考虑因素之一。本设计各个部分均采用开源的组件和程序，比如说Python、wxPython等等，在提供完善功能的前提下大大降低了系统成本。
扩展性：扩展性是系统设计的重要原则之一，拥有相对较强的扩展性可以大大提高系统的复用程度。本系统服务器的程序设计语言Python、wxPython做的GUI，包括数据库MySQL等均是可扩展的。
规范性：系统的规范性对于系统的维护非常重要，为了保证开发人员能够快速解决后期遇到的问题，系统需要严格遵循一定的规范性。本系统在各方面都遵循了相应的规范性。
4.2 系统总体设计
本系统是医学影像服务平台的一部分，用户与各个模块之间存在信息的交互。图4.1所示的是系统整体架构图。
 
图4.1 系统架构图
4.2.1 系统模块化设计
在进行系统设计的过程中，分模块设计是运用较普遍的设计方法之一。模块化的设计有利于降低系统内部的依赖性，并且大大促进了模块的扩展性与延伸性。在本系统的设计中，首先应该完成系统整体的结构设计，接着把系统整体结构分为各个模块，然后进行模块设计，最后基于需求分析，把各项功能添加到各个模块中进行完善。
经过对系统结构的整体分析、设计，得到了图4.2所示的系统总体设计示意图。这个系统示意图主要描述了系统的总体设计，包括用户医生、专家医生、Web服务器和数据库这四个部分。
 
图4.2 系统总体设计示意图
系统是基于模块化设计的，总共包含4个大的模块，图4.3为系统模块化组织结构示意图：
 
图4.3 系统模块化组织结构示意图
系统的模块化设计主要包含4个部分，分别是服务器模块设计、用户网页端模块设计、用户文件上传客户端模块设计和数据库模块设计。网页端模块主要设计的是用户医生和专家医生的注册、登录、患者信息显示、患者信息提交、文件下载等。文件上传模块主要设计的是用户医生和专家医生的文件上传部分。用户医生和专家医生可以在文件上传客户端上传患者的影像数据等相关文件，并且可以查看以往上传过的所有患者文件。
4.2.2 B/S体系结构
B/S体系结构是浏览器与服务器模式，它是随着互联网发展产生的。利用Web实现用户的客户端，设计的关键是服务器功能的设计，这样就可以简化客户端的设计。这样的设计方法可以节约成本、提高效率、易于维护[13]。本设计的网页端模块采用的是B/S体系结构。用户的注册、登录、查看患者信息、下载患者文件等功能均是在网页上实现的。
在本设计中，客户端需要安装浏览器和文件上传客户端即可，服务器端需要安装相应的数据库开发工具MySQL。在连接通信的过程中，客户端通过服务器端程序和数据库进行交互。随着互联网的发展，B/S结构逐渐被广泛应用，B/S结构模型如图4.4所示。
 
图4.4 B/S结构模型图
4.2.3 C/S体系结构
C/S体系结构是客户机和服务器结构，这种体系结构中的服务器为多个客户应用程序管理数据，而客户程序负责发送数据，这也是一种“肥客户机（Fat Client）”，“瘦服务器（Thin Server）”的网络计算模式。C/S体系结构的特点是应用系统的程序代码存储在客户端，数据库管理及全部信息集中在服务器端，而客户端相对简单、方便[14,15]。本系统的文件上传模块采用的是C/S体系结构，文件上传模块具有单独的程序，这个程序是基于wxPython编写的。用户医生和专家医生在使用系统的上传文件这个功能之前，需要预先在个人电脑上把本系统的文件上传软件安装好，然后就可以在文件上传软件上进行患者文件的上传。如图4.5是C/S结构模型图。
 
图4.5 C/S结构模型图
4.3 服务器模块设计
本系统的服务器模块基于的是Tornado框架。Tornado Web应用程序通常包含一个或多个RequestHandler子类，一个Application对象用来路由给控制器用户的请求，还有一个main()方法来启动服务器。Application对象负责全局的设置，包括请求到控制器的路由表。路由表是URLSpec对象的列表，每一个URLSpec对象包含至少一个正则表达式和控制器类。路由表是顺序相关的，将会把请求路由到第一个匹配的规则，如果正则表达式中有capturing groups，这些groups会被作为路径参数传递到控制器HTTP方法中。
大部分Tornado web应用程序都是在RequestHandler子类中完成的，是由get()和post()这样的HTTP方法控制，控制器同时可以定义多个HTTP方法，这些方法会处理相对应的路由请求。表4.1所示的是服务器中的路由表。
表4.1 服务器中的路由表
正则表达式	控制器类
r’/’	IndexHandler
r’/index1.html’	IndexHandler
r’/abstract.html’	AbsHandler
续表4.1 服务器中的路由表
正则表达式	控制器类
r'/userdoclogin.html'	userLoginHandler
r'/userdocsubmit.html'	userSubmitHandler
r'/expertdoclogin.html'	expertLoginHandler
r'/browsercase/(.*)'	BrowsercaseHandler
r'/ebrowsercase/(.*)' 	EBrowsercaseHandler
r'/uuploadfile/(.*)'	UUploadfileHandler
r'/euploadfile/(.*)'	EUploadfileHandler
r'/udownloadfile/(.*)/(.*)/(.*)'	UDownloadfileHandler
r'/edownloadfile/(.*)/(.*)/(.*)'	EDownloadfileHandler
r'/register.html'	RegisterHandler
4.3.1 用户医生、专家医生注册部分设计
用户医生和专家医生的注册在服务器模块中由RegisterHandler来处理的。当用户请求注册时，在RegisterHandler中首先执行get()方法，把注册页面显示出来。用户填完注册信息之后，点击提交，此时调用RegisterHandler中的post()方法，把用户的基本信息保存在数据库中。
4.3.2 用户医生、专家医生登录部分设计
用户医生和专家医生的登录在服务器模块分别由RequestHandler的子类userLoginHandler和expertLoginHandler来进行处理的。当用户请求登录时，首先调用登录Handler的get()方法，用户输入用户名、密码后提交表单，再由Handler中的post()方法进行处理。处理完成后，根据当前登录的用户医生或者专家医生进行显示相关页面。
4.3.3 用户医生提交患者信息部分设计
用户医生提交患者信息时，需要userSubmitHandler来进行处理，首先调用的是get()方法，显示用户医生提交患者信息的页面，然后由用户医生填写患者相关信息，姓名、年龄、性别等患者基本信息，点击提交后，服务器调用post()方法处理表单，post()方法会把用户医生提交的患者信息保存到数据库中。在数据库保存完成患者信息之后，系统会根据提交的任务科室自动把任务分配给相应的专家医生进行处理。
4.3.4 用户医生和专家医生查看患者信息部分设计
当用户医生和专家医生需要查看患者信息时，服务器分别用BrowsercaseHandler和EBrowsercaseHandler来进行处理，这两个控制器分别相应用户医生和专家医生的查看患者信息的请求。用户医生的BrowsercaseHandler中的get()方法从数据库中找出当前患者的基本信息和影像数据等文件信息，然后给用户医生查看。专家医生的EBrowsercaseHandler中有get()方法和post()方法，因为对于专家医生来说，查看患者信息有两种情况，一种是专家医生还没有处理分配的任务，另一种是专家医生已经对患者信息进行了反馈。当专家医生对患者信息进行反馈时，需要post()方法来处理提交的表单。
4.3.5 用户医生和专家医生上传文件部分设计
用户医生和专家医生上传患者文件分别是由UUploadfileHandler和EUploadfileHandler中的post()方法进行处理的。上传文件是通过requests包中的post()方法实现的。用户医生和专家医生上传文件之后，系统在当前医生的对应路径下保存这个文件，而数据库中只保存用户医生的专家医生上传文件的名称和路径，这样也大大减小了数据库的开销。
4.3.6 用户医生和专家医生下载文件部分设计
用户医生和专家医生下载患者文件分别是由UDownloadfileHandler和EDownloadfileHandler中的get()方法处理的，服务器需要知道当前用户需要下载哪一个医生的哪一个病人的哪一个文件（由URL中的3个参数分别确定），然后系统到已保存的相应医生的文件路径下方找到具体文件，调用write()方法进行文件下载。用户医生和专家医生均可以下载自己上传的与对方上传的所有文件。
4.4 网页端模块设计
网页端模块设计包括用户医生和专家医生的注册、登录设计，用户医生新建病例、患者信息列表显示设计，专家医生提交、查看患者信息、任务列表显示设计以及患者影像数据等文件下载，下面介绍这些网页端模块的设计。
4.4.1 用户医生和专家医生的注册、登录设计
使用本系统之前，需要用户医生和专家医生先进行注册，专家医生需要设置自己的研究方向，以便于系统正确的分配用户医生提交的任务。用户医生注册信息需要填写姓名、性别、年龄、手机号、邮箱、所属医院、用户名、密码等基本信息，专家医生的注册信息除了填写与用户医生一样的信息之外还需要设置自己的科室信息，从而方便系统分配相关的任务给专家医生。
用户医生注册完毕之后，就可以登录自己的主页面。然后用户医生可以新建病例、提交病人的信息，以及上传病人的相关文件。在提交任务的同时，用户医生需要选择当前病人所患的疾病属于哪一个科室，然后系统会根据具体的患者信息自动将任务分配给相应科室的专家医生。
4.4.2 用户医生新建病例设计
用户医生新建病例，需要一个单独的网页。在这个单独的页面中，用户医生需要填写患者的基本信息，包括姓名、年龄、病史、患病初诊，这些是用type为text的输入来设计的，患者的性别用radio，因为患者性别只存在男、女两种情况。患病所属科室用select来设计，用户医生只能选择系统中存在的科室。病情描述是用大段文字来介绍的，所以病情描述用textarea来设计。用户医生新建病例的设计还用到了jQuery的插件validate，用来判断在提交前用户医生是否完整填写患者信息。
4.4.3 用户医生、专家医生主页面设计
用户医生和专家医生的主页面需要显示患者的缩略信息，并且可以点击查看详细信息。用户医生和专家医生主页面的设计主要利用的是jQuery的插件datatables，datatables可以对患者信息进行排序、查找、分页等操作，大大方便了用户医生和专家医生处理患者数据。
4.4.4 查看患者信息、文件下载设计
用户查看患者信息和文件下载均在同一个页面完成设计，这个页面利用了bootstrap、jQuery等工具设计表格，患者信息一目了然，文件下载也十分方便。
4.5 文件上传模块设计
用户医生和专家医生的文件上传模块设计主要包括文件上传客户端的设计和服务器处理客户端的提交设计。文件上传客户端是用户医生和专家医生用来选择患者影像数据、化验信息、检查结果等文件进行上传的程序。文件上传客户端是用wxPython编写的图形用户界面（GUI），用户医生和专家医生在使用文件上传功能之前，需要先在个人电脑中安装好本程序。服务器在接受到用户上传的文件之后，把文件存到对应用户医生或者专家医生的路径下，然后数据库保存文件名、路径等信息
用户医生和专家医生的工作顺序是先提交患者信息，再上传患者的相关文件。所以用户医生和专家医生应该在网页端先进行患者相关信息的提交，提交完成之后，就可以在文件上传客户端选择患者文件进行上传。
4.6 数据库模块设计
数据库在系统的设计和实现中扮演着重要的角色，它保存了用户医生和专家医生大量的数据，包括注册信息和医生上传的患者数据。在本设计当中，Python编程语言来控制MySQL数据库中表的增、改、查等操作，利用的是MySQLdb这个数据接口API，其中最常用也是最重要的方法是execute[16]。
4.6.1 用户医生信息表设计
在用户医生使用系统之前，需要进行注册和登录。用户医生的注册信息需要保存在一个数据库表中，这些信息包括用户医生的用户名、密码、姓名、性别、年龄、手机、邮箱和单位。用户医生的这些注册信息由表4.2所示的用户医生信息表来保存。除了保存用户名、密码之外，还保存了用户医生的一些基本信息，这些基本信息是可以确保用户医生的真实性。
表4.2 用户医生信息表
字段	类型	可空	字段描述
id	integer	YES	ID，主键
name	varchar(20)	YES	用户医生的用户名
password	varchar(20)	YES	用户医生的登录密码
uname	varchar(20)	YES	用户医生的姓名
gender	varchar(5)	YES	用户医生的性别
age	varchar(3)	YES	用户医生的年龄
phonenum	varchar(11)	YES	用户医生的手机号
email	varchar(50)	YES	用户医生的邮箱
hospital	varchar(100)	YES	用户医生的单位名称
用户医生信息表保存了所有注册过的用户医生的全部基本信息，这些信息能够有效的帮助系统进行任务的分配，同时可以协助专家医生对患者的病情进行诊断。
4.6.2 专家医生信息表设计
专家医生在使用系统时，同样需要先注册填写相关的基本信息。专家医生的基本信息除了包括用户名、密码、姓名、性别、年龄、手机、邮箱、单位之外，还需要科室id，科室id有助于系统合理分配用户医生提交的任务。当用户医生新建病例提交患者的基本信息时，需要选择当前患者所患的疾病属于哪一个科室，如：内科、外科、儿科、骨科、神经科等等，然后系统会根据用户医生的选择把任务分配给对应科室的专家医生。这样的分配更确切实际，而且能够帮助用户医生和专家医生更高效的工作。这些信息由表4.3所示的专家医生信息表来保存。
表4.3 专家医生信息表
字段	类型	可空	字段描述
id	integer	YES	ID，主键
name	varchar(20)	YES	专家医生的用户名
password	varchar(20)	YES	专家医生的登录密码
uname	varchar(20)	YES	专家医生的姓名
gender	varchar(5)	YES	专家医生的性别
age	varchar(3)	YES	专家医生的年龄
phonenum	varchar(11)	YES	专家医生的手机号
email	varchar(50)	YES	专家医生的邮箱
hospital	varchar(100)	YES	专家医生的单位名称
type	varchar(2)	YES	专家医生的科室
专家医生信息表保存了所有注册过的专家医生的基本信息，包括专家医生的科室id，科室id可以帮助系统高效、准确的分配任务。
4.6.3 科室信息表设计
科室信息表主要保存的是科室的ID和科室的名称，因为在专家医生信息表中，专家医生所处科室是用科室id表示的，而在科室信息表中，这个科室id和科室名称是一一对应的。这样的数据表设计可以降低系统的冗余度，并且能够在一定程度上减少存储空间的使用。表4.4所示的即为科室信息表。
表4.4 科室信息表
字段	类型	可空	字段描述
id	integer	YES	科室ID，主键
typename	varchar(30)	YES	科室名称
科室信息表保存全部科室id以及科室名称，这样的数据表设计可以方便系统的查找和任务的分配。
4.6.4 用户医生患者表设计
每一个用户医生有一张自己的用户医生患者表，在这张表中保存的是自己上传的患者基本信息，这些信息可以供用户医生进行查看，在系统分配完任务之后，相应的专家医生可以对这些患者的基本信息进行查看。这些信息主要包括患者姓名、年龄、性别、病史、初诊结果、病情描述、上传时间、是否上传、是否分配、是否下载以及分配给的专家医生。用户医生患者表上的一部分数据构成了用户医生网页Web端的主页面，在主页面上，用户医生可以看到自己上传的患者的缩略信息。用户医生患者表上的另外一部分数据构成了用户医生查看详细病人信息的页面，在这个页面上，用户医生可以看到自己上传的患者具体信息，如姓名、病史、病情描述等等。表4.5所示的是用户医生患者表的具体描述。
表4.5 用户医生患者信息表
字段	类型	可空	字段描述
id	integer	YES	用户医生病人的ID，主键
name	varchar(10)	YES	患者姓名
age	varchar(5)	YES	患者年龄
gender	varchar(5)	YES	患者性别
history	varchar(100)	YES	患者病史
firstjudge	varchar(20)	YES	用户医生的初诊结果
description	varchar(500)	YES	患者的病情描述
time	timestamp	NO	用户医生上传时间
upload	bool	YES	是否上传成功
distribute	bool	YES	是否分配
diagnose	bool	YES	是否诊断
exdoc	varchar(10)	YES	分配的专家医生
用户医生患者信息表保存了用户医生上传了的全部的患者信息（除了相关文件）。在用户医生自己的主页面，他可以看到编号、患者姓名、上传时间、分配的专家医生、是否上传完成、是否分配完成、是否诊断完成这些基本信息。然后点击查看，用户医生即可看到详细的患者信息以及上传相关文件。
4.6.5 专家医生患者表设计
每个专家医生在数据库中有一张属于自己的患者数据表，这张表中保存了分配给专家医生的患者的部分基本信息，包括专家医生反馈的全部信息（除了影像数据等相关文件）。这些信息包括当前患者的编号、上传的用户医生、当前患者在用户医生表中id、复诊结果、治疗建议、影像描述、影像诊断、上传时间、患者姓名、初诊结果以及是否处理。表4.6所示的是专家医生患者信息表的具体描述。
表4.6 专家医生患者信息表
字段	类型	可空	字段描述
id	integer	YES	用户医生患者ID，主键
nameu	varchar(10)	YES	患者的用户医生用户名
idp	integer	YES	患者在用户医生表中id
secondjudge	varchar(20)	YES	专家医生复诊结果
opinion	varchar(500)	YES	专家医生治疗建议
imgdescription	varchar(200)	YES	专家医生影像描述
imgjudge	varchar(200)	YES	专家医生影像诊断
time	timestamp	NO	专家医生提交时间
pname	varchar(10)	YES	患者姓名
firstjudge	varchar(20)	YES	初诊结果
handle	bool	YES	专家医生是否处理
专家医生患者信息表保存了所有系统分配给当前专家医生的任务，包括专家医生处理过的和未处理过的。当专家医生的任务还未反馈，当前患者的影像描述、影像诊断、复诊结果、治疗建议和提交时间均为空；当专家医生提交了任务的反馈，数据表中会保存相关信息（不包括影像数据等相关文件信息）。在专家医生表中，pname（患者姓名）和firstjudge（初诊结果）都可以在相应的用户医生表中找到，这里虽然造成了部分数据的冗余，但为了方便专家医生的查看和系统的查找，也在专家医生患者表中保存了相关信息。
4.6.6 用户医生和专家医生的患者文件上传信息表设计
用户医生和专家医生的患者文件上传表是相似的，数据表的字段均是相同的，所以在此一并进行设计。每一名用户医生和专家医生均有属于自己的一张文件上传表，数据表的名称是用户医生和专家医生的用户名。在文件上传表中，主要保存的信息有患者id、文件编号、文件名、文件路径、是否上传完毕等信息。用户医生和专家医生需要打开自己的文件上传客户端进行影像数据等文件的上传，当他们在本地选择患者的相关文件之后，数据库中就会保存这些文件的基本信息，包括文件名、文件路径等。用户医生和专家医生点击开始上传后，系统会对这些文件进行处理、上传。表4.7所示的是用户医生和专家医生患者文件上传信息表的具体描述。
表4.7 患者文件上传信息表
字段	类型	可空	字段描述
num	integer	YES	患者的文件序号
id	integer	YES	患者在医生表中的id
filename	varchar(50)	YES	文件名
dirname	varchar(100)	YES	文件路径
path	varchar(150)	YES	文件的全部路径
upload	bool	YES	文件是否上传完毕
患者文件上传表中保存的信息并不多，跟用户医生患者表和专家医生患者表联系的唯一方式是患者的id，患者的id和文件的序号num就可以确定唯一的一个文件。患者文件上传表中保存的路径是用户医生和专家医生本地的文件路径，并不是文件上传到系统之后的路径。
4.6.7 数据库E-R图
E-R图是实体-联系图（Entity Relationship Diagram），能够形象的表示出实体的属性以及和数据表与数据表之间的关系。图4.6所示的是用户医生的E-R图。
 
图4.6 用户医生E-R图
用户医生的E-R图是用户医生信息表、用户医生患者信息表和用户医生的患者文件上传信息表构成的。
图4.7所示的是专家医生的E-R图。
 
图4.7 专家医生E-R图
专家医生的E-R图是专家医生信息表、专家医生科室信息表、专家医生患者信息表和专家医生的患者文件上传信息表构成的
4.7 本章小结
本章首先介绍了系统的总体设计，在系统总体设计中，又介绍了本系统用到的两个体系结构。然后以模块化设计进行了介绍，分别为服务器模块、网页端模块、文件上传模块和数据库模块。在数据库模块设计中，又详细的介绍了数据库中数据表的设计。
系统设计是整个系统最终实现的关键一环，清晰、明确的系统设计对于系统实现至关重要。本章的模块化设计是系统设计中较普遍的方法之一，模块之间在独立的同时也有一定的关联，这也更有助于系统实现的完成。



 

 
第5章 系统实现
根据需求分析，结合系统设计，本章对系统各部分的实现做了详细的介绍。系统实现对于整个系统的运行起着重要的作用，好的系统实现可以增加用户体验，吸引更多的用户。
5.1 系统Web网页端的实现
系统Web网页端的实现包括用户医生的注册、登录、新建病例和查看患者相关信息的实现，也包括专家医生的注册、登录、反馈任务和查看患者相关信息的实现。用户医生和专家医生是系统的两个不同的用户，他们拥有不同的权限，对系统的操作也不同。
5.1.1 用户医生和专家医生注册功能实现
用户医生和专家医生的注册和登录的目的是为了保证系统的权限和安全，使用系统的用户必须先进行注册。然后，系统根据用户的注册信息来赋予不同用户不用的权限。比如说用户医生的权限是可以新建病例向系统提交新的患者任务和查看专家医生的反馈等等，而专家医生的权限是解决系统分配来的任务并且提交相关反馈，系统会根据他们的注册信息来区别不同的用户。
注册信息对系统各部分功能的实现都有影响，用户的登录信息就是从注册信息中获取的。其中还涉及到了RBAC模型（Role-Based Access Control 基于角色的权限访问控制），RBAC的基本思想是引入角色，从而将用户和访问权限以间接的形式连接起来，根据系统用户的工作方式设置角色，然后授予角色对应的权限，再给用户分配角色[17]。可以抽象的进行概括为“谁（Who）能对什么（What）进行怎样的（How）操作”。
5.1.1.1 用户医生注册功能实现
用户医生在使用系统之前，需要先进行注册。注册是在Web网页端实现的，用户医生的专家医生的注册均在同一个页面，页面上有两个不同的选项卡，用bootstrap和jQuery实现，分别对应用户医生和专家医生的注册。用户医生需要在Web页面上填写基本信息以及用户名和密码，来完成注册。这里用到了jQuery的validate插件，如果用户医生没有填写完整的注册信息，系统会提醒用户医生，信息填写完整才可以进行提交。在这之后，系统会保存用户医生的注册信息，然后用户医生就可以登录系统并且开始上传患者的信息和影像数据等相关文件来提交任务。图5.1是用户医生的注册流程图。
 
图5.1 用户医生注册流程图
5.1.1.2 专家医生注册功能实现
专家医生的注册功能实现和用户医生的注册功能实现基本相同，都需要用户提交个人的相关基本信息，然后系统根据专家医生的注册信息来授予专家医生相应的权限。用户医生和专家医生注册功能实现唯一不同的地方是专家医生要提交自己的科室信息。考虑实际情况，使用本系统的用户医生大多都应该是欠发达地区的医生，他们经验不足、医疗水平有限，而使用本系统的专家医生大多都应该是有丰富的专业知识、医学水平较高的医生，所以系统只对专家医生的科室进行记录，而并没有记录用户医生的科室。但是，用户医生在提交新的任务时，需要对患者所患病的科室进行选择，比如：内科、外科、儿科、神经科等等，从而方便系统分配用户医生提交的任务。
专家医生的科室信息对于系统任务的分配很重要，系统会根据用户医生提交的任务的种类来把不同的任务分配给不同科室的专家医生，从而方便专家医生诊断和反馈患者病情。图5.2是专家医生注册流程图。
 
图5.2 专家医生注册流程图
5.1.2 用户医生Web网页端的实现
用户医生Web网页端包括用户医生的登录、新建病例、查看患者信息和下载已上传的影像数据等相关文件。
下面就来一一介绍这些部分的具体实现。
5.1.2.1 用户医生的登录实现
几乎在每一个有用户操作和权限授予的网站都有用户登录的功能，用户登录之后才能进行相关的具体操作。
在用户医生注册之后，需要进行登录才能完成新建病例、查看患者信息或者下载患者相关文件等操作。图5.3是用户医生登录的流程图。
 
图5.3 用户医生登录流程图
用户医生登录的主要流程是先输入用户名和密码，然后提交，系统此时会在数据库用户医生信息表中查询输入的用户名和密码，如果查询成功，就通过登录请求，并且显示当前用户医生的主页面。
5.1.2.2 用户医生新建病例的实现
用户医生在整个系统中扮演的是提交任务的角色，他需要把患者的一些个人信息和相关文件上传到系统，然后系统根据所提交的具体信息把任务分配给相应的专家医生，所以新建病例功能对于用户医生来说十分重要。用户医生在自己的主页面中可以找到新建病例的按钮，点击即可在下一个页面中提交患者的基本信息。图5.4是用户医生新建病例的流程图。
 
图5.4 用户医生新建病例流程图
5.1.2.3 用户医生查看患者信息的实现
用户医生查看患者信息分为两种情况：第一种是专家医生还未反馈相应的任务，用户医生此时只能查看自己提交的患者信息和相关文件；第二种情况是专家医生已经给出相应的反馈，用户医生此时不仅仅可以查看自己提交的患者信息，还可以查看专家医生提交的患者反馈和相关文件。查看患者信息功能对于用户医生来说既可以查看专家医生的反馈和下载影像数据等相关文件，又可以后期重新查阅患者信息，所以这项功能的实现非常重要。
这项功能的具体实现是这样的，在用户医生登录之后，系统会显示当前医生的主页面，主页面上有全部的用户医生提交过的患者简略信息，点击不同患者信息的“查看”，即可到达下一个查看患者信息界面，在这个界面中用户医生可以查看患者相关信息和下载患者相关文件。
5.1.3 专家医生Web网页端的实现
专家医生Web网页端的实现包括专家医生的登录、任务列表的显示、查看患者信息，以及下载患者影像数据等相关文件。
下面就来一一介绍专家医生Web网页端的具体实现。
5.1.3.1 专家医生的登录实现
在专家医生处理任务之前，需要先进行登录，然后系统根据当前登录的专家医生的信息来显示相应的任务列表。专家医生在任务列表上才能进行相关的反馈信息操作，所以登录功能对于专家医生来说十分重要。图5.5是专家医生的登录流程图。
 
图5.5 专家医生登录流程图
专家医生登录的主要流程是先输入用户名和密码，然后提交，提交后系统会在专家医生信息表中查找，如果有对应的用户名和密码，说明登录成功，然后系统会返回当前专家医生的任务列表供专家医生查看。
5.1.3.2 专家医生反馈及查看患者信息的实现
当系统分配给专家医生任务时，专家医生需要尽快做出反馈来帮助用户医生诊断病人病情。专家医生可以点击任务的“查看”来给出相关的反馈，给出信息反馈后，专家医生还可以打开文件上传客户端来上传患者影像数据等相关文件。图5.6是专家医生的反馈流程图。
 
图5.6 专家医生反馈流程图
在专家医生反馈之前，他可以在同一个页面查看用户医生提交的患者信息，并且可以下载用户医生上传的患者文件。这些信息都能够帮助专家医生对患者病况进行判断，从而给出相应的反馈。
在专家医生提交反馈成功之后，他可以再次点击任务列表中对应任务的“查看”来回顾自己提交的患者信息和文件，也可以在相同的页面查看用户医生的提交。
5.1.4 文件下载的实现
医学影像文件对医生诊断病人的病情来说十分重要，患者的确诊很大程度上取决于影像数据是否充足，所以本系统基于实际需求，实现了文件上传和下载的功能，本节主要讲的是患者文件下载的实现。
用户医生和专家医生都可以在自己的文件上传客户端上传患者的相关文件，这些文件包括影像数据、化验信息、检查结果等文件，在上传之后，系统必须要保证对方能够下载相关文件来进行查看，只有这样，才能实现系统的基本功能，才能保证专家医生反馈准确的复诊结果。
在本系统中，当用户点击下载某个文件时，文件的一些信息会作为URL的参数传递给服务器对应的Handler，相应的Handler接受到这些参数之后，就准备开始进行文件下载。本系统文件下载使用的是HTTP协议，所以在文件下载之前要先设置HTTP的头部header。然后设置一个buffer值，每次以二进制模式(binary mode)读取一部分文件内容（本系统设置的是4096字节），然后进行下载write。下载完成之后，结束连接。图5.7是用户医生和专家医生下载文件的基本流程。
 
图5.7 文件下载流程图
5.2 系统文件上传客户端的实现
医学影像等文件能够帮助专家医生对患者的病情进行诊断和治疗，所以对于本设计医学影像服务平台远程诊断模块来说，传输大量医学文件是必须实现的。而且对于医生诊断来讲，各种影像数据更是起着不可替代的作用，比如说CT图像、X光图像等等。本系统上传文件采用的是二进制模式上传的，所以不仅可以上传影像数据（图片、视频等），而且也可以上传各种类型的文件。本节内容是从两个方面来对文件上传客户端的实现进行介绍的，分别是图形用户界面GUI的实现和文件上传到系统的实现。
5.2.1 基于wxPython的图形用户界面GUI实现
本系统的文件上传模块是在一个单独的图形用户界面上实现的，并没有在网页上实现。这样设计实现的原因是：1.因为服务器是基于Python的tornado框架实现的，所以为了体现Python语言的独特性、扩展性和运用广泛性，本设计用wxPython实现了文件上传图形用户界面。2.如果把文件上传模块用Web网页端实现，当有大量患者文件时，就会造成页面的复杂和混乱；而且单独把这个模块拿出来实现也大大方便了用户医生和专家医生的文件上传。所以本设计最后决定用wxPython来实现文件上传的图形用户界面。
用户医生和专家医生在提交患者的相关信息之后，打开文件上传客户端，然后选择要给哪位患者上传文件，在这之后就可以开始上传文件了。图5.8是选择要上传哪位患者的文件界面。
 
图5.8 选择患者界面
图5.9是文件上传的图形用户界面。用户医生和专家医生在此界面进行患者文件的上传。用户可以点击“选择文件”，然后可以到本地一次性选择一个或多个文件，选择后的文件会出现在下方的ListCtrl控件中；用户也可以点击“选择文件夹”，然后到自己的个人电脑中选择要上传的文件夹，系统会通过walk()函数把当前这个文件夹中的所有文件找出（包括子文件夹下的文件），这些文件也会出现在下方的ListCtrl控件中。在把所有的文件都选择完毕之后，用户可以点击“开始上传”来上传给系统所有选择的文件。用户也可以点击“暂停上传”和“继续上传”来控制文件的上传。在用户界面的左下角还有一个进度条控件，用来显示当前文件的上传进度。
 
图5.9 文件上传的图形用户界面
5.2.2 文件上传的具体实现
本系统的文件上传调用的是requests包，因为可以利用requests包中的post来上传一个多部分编码（Multipart-Encoded）的文件。本小节主要讲述文件上传的具体实现，包括文件上传的流程，步骤以及相关方法。
用户医生和专家医生点击“选择文件”或者“选择文件夹”来选择要上传给系统的患者文件，在个人电脑上选择完毕之后，首先这些文件会在用户界面上显示，然后这些文件的序号、名称、路径、对应的患者ID等信息会被保存在数据库中，每一个文件在数据库中都有一个标记位（upload）用来标记当前这个文件是否已经上传成功，如果文件还未开始上传，标记位为0，如果当前文件上传成功，相应文件的标记位会被置1。在ListCtrl中已经显示用户已选择的文件，即使系统此时发生崩溃也不会造成文件的遗失，但可能会造成部分文件没有上传成功，因为数据库中已经保存了相关文件的名称和路径，用户只需要再次打开用户界面，重新上传即可。图5.10是文件上传的流程图。
 
图5.10 文件上传流程图
用户医生和专家医生选择的文件会先经由用户端（文件上传GUI）处理，然后上传给服务器，服务器再进行处理。
在用户端，用户选择完文件之后，点击“开始上传”，此时，需要定义URL（统一资源定位符），这个URL要与服务器中Application中的URL对应，便于服务器选择具体的Handler来处理客户端上传的文件。然后，用户端以递归的方式一个一个的取得文件的路径，然后以二进制的模式打开文件，这个打开的文件作为一个字典的key为“file”的value值，最后调用requests的post函数来上传文件，URL和这个字典作为函数的参数一起传递给服务器。
在服务器端，服务器首先根据用户端传递来的URL去Application中找对应的Handler，找到之后就由这个Handler来进行接下来的工作。这个Handler首先需要判断是哪一个医生要上传哪一位患者的相关文件，然后定义这位医生的文件存储路径，最后把用户端传来的文件以二进制的模式进行存储。图5.11是用户端和服务器端对上传的文件进行操作的流程图。
              
   (a)用户端                                (b)服务器端  
图5.11 文件上传操作流程图
5.3 系统任务分配的实现
在整个系统中，任务分配也是一项关键的部分，合理的分配不仅可以保证系统的高效运行，而且可以大大提高专家医生的工作效率，使用户医生可以尽快的得到专家医生的反馈信息。
本系统的任务分配具体实现是这样的：首先，在服务器端建立多个全局的队列和多个全局变量，全局队列和全局变量的数目与科室的数目相同，每个科室对应唯一的一个队列。当有用户医生新建病例提交新的任务时，这个任务以Python中字典的元素形式进入队列，元素的key是用户医生的用户名，元素的value是提交的患者信息在用户医生表中的id。当系统分配任务时，这些信息会从队列中被取出。
本系统在专家医生注册的时候，会存储专家医生的科室信息，这将有助于系统分配任务。用户医生提交任务时会选择任务所属的相关科室，然后系统根据任务的科室信息来把这个任务分给对应科室的专家医生，方便专家医生进行诊断和反馈。 
系统的任务是基于平均原则分配的，同一个科室的多个任务会依次分给这个科室的专家医生。
5.4 本章小结
本章主要从3个方面介绍了系统的具体实现，分别是系统Web网页端的实现、系统文件上传客户端的实现以及系统任务分配的实现。系统Web网页端的实现又分为用户医生和专家医生注册实现、用户医生Web网页端实现、专家医生Web网页端实现以及文件下载的实现。系统文件上传客户端的实现分为图形用户界面的实现和文件上传的实现。
本章把系统分为了各个部分，然后依次介绍了各个部分。用户Web网页端构成了用户医生和专家医生基于患者信息交流的平台，而文件上传客户端实现了可视化的、可操作的患者影像数据等相关文件上传，它们一起实现了系统的全部功能。 






















 
第6章 系统测试
在系统的开发过程中，会不断的出现各种问题和漏洞，有些明显的问题我们可以在开发的过程中一并解决，但是有些并不容易被发现，所以在软件上线、投入实际环境运行之前，需要设计人员全面的对软件进行测试，尽可能的找出系统的全部问题和漏洞，从而避免用户使用的时候出现问题。系统测试对于系统的实际上线至关重要，它是对需求分析、系统设计和系统实现的最后检查。
系统测试对应于系统的开发和实现，本系统的测试分为以下两种层次：
(1)	模块测试：模块测试对应于各个模块内部的测试，主要测试的是模块的功能实现、问题和漏洞等等。
(2)	系统测试：系统测试对应的是整个系统的测试，包括模块之间数据传输的正确性，也包括整个系统是否能够稳定、正确的执行，还包括是否实现了需求分析中的全部功能。
6.1 模块测试
6.1.1 注册模块测试
当用户首次使用本系统时，需要先进行注册。图6.1是系统的主页面，用户可以点击右上角的“注册”来注册为用户医生或专家医生。用户需要根据自己使用本系统的原因来注册为用户医生或者是专家医生，因为用户医生和专家医生的权限不同。用户医生扮演的是提交任务的角色，他需要上传患者的信息和文件来供专家医生诊断；专家医生扮演的是反馈任务的角色，他需要根据患者的病情给出相应的诊断，从而帮助用户医生治疗病人。图6.2和图6.3分别是用户医生注册和专家医生注册。
 
图6.1 系统主页面
 
图6.2 用户医生注册
 
图6.3 专家医生注册
用户医生和专家医生的注册功能基本相似，填写的基本信息也基本相同。唯一不同的是专家医生多了一个科室信息的选择，因为分配用户医生提交的任务的时候，需要知道不同的专家医生的研究方面，从而帮助系统高效的进行分配。注册成功后，系统会提示注册成功，随后用户就可以使用本系统了。
6.1.2 用户医生登录模块测试
当用户医生注册成功之后，可以点击主页面的“用户医生入口”，然后系统跳到用户医生登录界面，如图6.4，填写用户名、密码后，页面跳转到用户医生主页面，登录测试成功。
 
图6.4 用户医生登录界面
6.1.3 用户医生新建病例模块测试
当用户医生注册成功后，可以登录自己的主页面，图6.5是用户医生未提交任务的主页面。
 
图6.5 未提交任务的用户医生主页面
在用户医生主页面的左上角有“新建病例”的链接，用户医生可以点击链接来新建病例。当用户点击“新建病例”之后，页面会跳转到用户医生提交任务的界面。图6.6是用户医生填写患者信息，提交任务的页面。
 
图6.6 用户医生提交患者信息
用户医生填写完患者的基本信息之后，点击“提交”来上传给系统这些信息，系统会根据患病所属科室来分配这个任务。图6.7是用户医生提交任务之后的用户医生主页面，新建病例测试成功。
 
图6.7 提交任务之后的用户医生主页面
用户医生成功提交任务后，系统会跳回用户医生的主页面。在这个页面中，用户医生可以看到自己提交的患者的概要信息，包括患者姓名、上传时间、分配给的专家医生和上传、分配、诊断的情况。表格是利用jQuery的插件datatables实现的，可每一列的项可以进行排序，也可以进行搜索查询。
6.1.4 用户医生文件上传模块测试
确诊患者的病况需要患者的基本信息和患者的相关文件，用户医生把患者的基本信息提交成功之后，需要同时上传患者的相关文件，图6.8是用户医生选择提交哪一位患者的文件单选框界面。
 
图6.8 用户医生选择患者界面
用户医生选择患者之后，就可以选择患者相关文件进行上传了，如图6.9所示，选择文件和文件夹来进行文件上传测试。
 
图6.9 用户医生患者文件上传界面
用户医生文件上传测试成功。
6.1.5 用户医生查看上传的患者信息模块测试
当用户医生把患者基本信息和相关文件都上传完成之后，需要查看已上传的患者信息。点击主页面上与患者相对应的“查看”，图6.10是当前登录的用户医生userdoc2点击查看之后的患者相关信息页面。
 
图6.10 用户医生查询上传的患者信息
如图所示，跳转到的页面可以显示全部用户医生提交的患者信息和上传的相关文件，用户医生查询患者信息测试成功。
6.1.6 专家医生反馈分配的任务模块测试
用户医生提交任务之后，系统会自动根据科室信息进行任务分配，分配之后的任务会显示在对应专家医生的主页面中，专家医生可以登录他的主页面，然后点击“查看”来提交关于患者病情的反馈。图6.11是专家医生反馈测试。
 
图6.11 专家医生反馈页面
如上图所示，专家医生点击主页面的“查看”，然后页面跳转到反馈页面，专家医生填写反馈信息后进行提交。经验证提交成功，专家医生反馈分配的任务测试成功。
6.1.7 专家医生下载患者文件模块测试
专家医生在诊断患者病情的过程中，需要以用户医生提交的患者信息和上传的患者文件作为参考，在这种情况下就需要在查看患者信息的页面进行文件下载，图6.12是专家医生下载文件测试。
 
图6.12 专家医生下载患者相关文件
经验证，如图所示，专家医生下载患者相关文件测试成功。
6.1.8 专家医生文件上传模块测试
专家医生给用户医生反馈了患者的基本信息之后，还可以进行相关文件的上传。专家医生的文件上传过程和用户医生的文件上传过程基本相同，使用的也是文件上传客户端来上传文件。图6.13是专家医生选择患者的界面。
 
图6.13 专家医生选择患者界面
专家医生选择完相关患者后，在图6.14的界面进行文件的上传。
 
图6.14 专家医生上传患者文件界面
专家医生文件上传测试成功。
6.1.9 用户医生查看专家医生的反馈及文件下载模块测试
当专家医生给出患者的相关反馈之后，用户医生需要进行查看，同时也需要下载专家医生上传的患者影像数据等相关文件。图6.15是用户医生在登录自己的主页面之后，查看的相应患者的反馈信息。
 
图6.15 用户医生查看专家医生反馈页面
如上图所示，用户医生可以正确的查看专家医生给患者的反馈信息，测试成功。图6.16是用户医生下载专家医生上传的文件测试。
 
图6.16 用户医生下载专家医生上传的患者文件
如上图所示，用户医生可以正确的下载专家医生上传的患者文件，测试成功。
6.2 系统测试
在完成每个模块的测试之后，需要把这些模块合并在一起进行系统测试。每一个模块的测试成功，并不代表系统测试就可以成功。所以，系统的整体测试对于系统的正确运行十分重要。
在本系统的系统测试中，任务分配模块出现了漏洞。在原本的模块设计当中，每当用户医生提交一个任务，这个任务就进入一个队列当中，这个队列中保存的是提交的各个科室的全部任务，然后系统从队列中取出这个任务就马上进行分配，这在单个模块中测试是没有问题的，但放到整个系统当中就有漏洞。当有较多的用户医生提交任务时，如果队列中的第一个任务无法提交（可能因为没有相关的专家医生等原因），会导致队列中的其他任务也无法提交，即使有相应的专家医生是空闲的。本设计在系统测试中，新加了两个队列（为了测试方便，系统只有内科、外科和儿科），每个队列里放的是不同科室的相关任务。这就可以避免因为一个科室的任务无法分配而造成阻塞其他科室的任务分配的情况。
6.3 本章小结
本章主要介绍了系统测试方面的内容，包括模块测试和系统测试。模块测试对应的是单个模块的功能测试，系统测试对应的是模块组合之后的系统整体功能测试。本章详细的介绍了测试过程、测试结果和测试截图，同时在整合模块之后发现了软件设计阶段因考虑不周而出现的问题，然后对这些问题和漏洞进行了处理。通过本章系统测试，本设计可以满足需求分析的功能要求，也能够正确稳定的运行。 
















 

 
第7章 结论
7.1 本论文工作总结
本论文首先说明了课题的研究背景和来源，介绍了课题的实际意义，然后简单介绍了本设计用到的相关技术，其中最重要的是Web前端技术和tornado框架。接着介绍的是需求分析，本文的需求分析基于实际情况，对用户医生和专家医生的工作方式进行了具体的分析。同时分析了系统设计，系统设计是在需求分析的基础上，从技术的角度描述设计过程。最后是系统实现，主要介绍的是用具体的方法、模型和技术来实现具体的需求。
本论文的工作主要包含以下几个方面：
（1）简单介绍了tornado框架的概念和优势，以及采用tornado服务器的原因。简要阐述了前端Web网页用到的相关技术，如HTML5、bootstrap、jQuery和jQuery的相关插件。
（2）通过模块化的分析得到了系统的功能性需求，然后对这些需求一一进行了相关具体描述。在这之后，也介绍了系统的非功能性需求分析和系统开发、运行环境。
（3）基于需求分析，系统得到了整个系统的基本设计和基本架构。然后结合实际，介绍了每个具体模块的设计和数据库设计。其中重点介绍了数据库的设计，因为本设计是用户医生和专家医生基于患者病情的交流平台，数据库保存了大部分的患者信息，所以数据库的设计在本系统中十分重要，会影响到用户医生和专家医生查询患者信息、下载患者文件等许多方面。
（4）根据需求分析和每个模块的具体设计，结合Python的编程思想，实现了每个模块的具体功能，然后把这些模块聚合在一起构成了整个系统的全部功能，完成了系统实现。
（5）最后对本系统进行了测试，分别从模块测试和系统测试出发，验证了系统的可靠性和正确性。在这个过程中，找出了问题，也解决了问题。最终完成系统测设。
7.2 展望
本设计给用户医生和专家医生提供了一个简单的沟通平台，能够在一定程度上缓解区域间的医疗服务分配不均，同时，如果平台的专家医生足够多，并且专业素养也足够高，本系统还可以成为一个远程医疗咨询服务平台，用户医生不仅可以经验缺乏的医生，还可以是遇到了疑难杂症的其他专家医生，这些专家医生可以通过本系统，跟全国各地的专家医生进行交流，帮助治疗患者病情。
当然，本设计仍有部分不足之处：
（1）用户医生提交单个任务之后，系统只能把这个任务分配给单个专家医生。如果用户医生提交的任务是疑难杂症，那他可能会需要多个专家医生的反馈来一起帮助他治疗患者。由于系统的局限性，无法把一个任务分配给多个专家医生。
（2）当用户医生接收到专家医生的反馈或者专家医生查看用户医生提交的任务时，只能把对方上传的患者影像数据等相关文件下载来进行查看，而不能在网页端直接进行查看，这在一定程度上增加了用户医生和专家医生的工作量。系统在设计时应该遵循用户方便使用的原则。
总之，随着科技的发展，远程医疗会越来越成熟，也会逐渐步入我们的日常生活当中。最后，希望本文中设计实现的系统能够给远程医疗体系方面的软件设计带来一定的帮助。
 
参考文献
1.	张毅.基于Web Service的远程医疗平台原型的设计与实现[A].华中科技大学.2017.
2.	WANG Xiao-min,WANG Peng-cheng,XIE Jin-dong. A New Design of Remote Diagnosis System for Medical Images[A]. 2009 International Conference on Management and Service Science[C],Wuhan,China,2009,1-3.
3.	王晓敏,谢晋东,王鹏程等.基于web技术的医学图像远程诊断系统的设计与实现[J].中国医学物理学杂志.2008,25(5):856-858.
4.	Python Scripting for Computational Science[M].Springer Berlin Heidelberg:2009.
5.	Cabral, Sheeri K. MySQL 5.5: Improving on the World's Most Popular Open Source Database[J]. Database Trends and Applications,2011,25(3):.
6.	刘西杰,张婷.HTML CSS JavaScript 网页制作从入门到精通[M].北京：人民邮电出版社,2016
7.	何光旭,康春华. 基于jQuery框架的医院HIS系统页面前端特效设计[J]. 电子设计工程,2015,(24):40-42.
8.	周玲余. 基于jQuery框架的页面前端特效的设计与实现[J]. 计算机与现代化,2013,(01):61-63.
9.	李保源. 用wxPython编写CAI课件用户界面[J]. 电脑学习,2007,(04):37-38.
10.	孟亚辉. 浅谈软件项目开发过程中的需求分析[J]. 科技信息,2009,(11):435-436.
11.	田精白. 网络式软件非功能需求分析方法及其应用[D].武汉大学,2009.
12.	张婷. 网络式软件非功能需求分析方法及其应用[J]. 信息与电脑(理论版),2014,(06):160-161.
13.	胡杨. 基于Web的个人医疗信息系统的设计与实现[D].吉林大学,2016.
14.	王倓,徐重阳,蔷薇,刘卫忠. 基于C/S结构的网络计算模型[J]. 计算机应用研究,2000,(09):50-53.
15.	冉林. 基于C/S模式的学生信息管理系统的设计与实现[D].电子科技大学,2007.
16.	郑岚. Python访问MySQL数据库[J]. 电脑编程技巧与维护,2010,(06):59-61.
17.	周姝昕. 基于RBAC权限管理数据库的改进与探究[J]. 海峡科技与产业,2016,(11):88-89. 

 
致谢
在本次毕业设计完成之际，谨向我的指导教师栗伟老师致以最衷心的感谢。感谢栗老师在整个毕业设计的过程中对我的指导和帮助，栗老师不仅指导我解决了选题、开题、系统设计、系统实现等方面的问题，而且督促和指导我写了论文。感谢栗老师对我的耐心指导和悉心帮助，导师的渊博学识、严谨态度和严格要求将使我受益终身。
同时，我也十分感谢物联网1302班的全体同学，在我遇到困难时，是他们第一时间来帮助和支持我。在即将过去的大学四年生活中，感谢有你们陪我一起度过。
最后，我谨向所有帮助和关心过我的老师、同学和家人致以最诚挚的谢意！
